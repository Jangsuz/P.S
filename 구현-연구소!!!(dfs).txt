#초기 설정
dx = [1, -1, 0, 0]
dy = [0, 0, 1, -1]

n, m = map(int, input().split())
#초기 맵 리스트
graph = []
#벽 설치한 뒤 리스트
temp = [[0] * (m) for _ in range(n)]
result = 0
#맵 정보 입력
for _ in range(n):
  graph.append(list(map(int, input().split())))

#DFS로 바이러스 퍼트리기
def virus(x, y):
  for k in range(4):
    nx = x + dx[k]
    ny = y + dy[k]
    if nx >= 0 and nx < n and ny >= 0 and ny < m:
      if temp[nx][ny] == 0:
        #해당 위치에 바이러스 배치하고,
        temp[nx][ny] = 2
        #재귀적으로 dfs 수행
        virus(nx, ny)

#안전 영역의 크기 계산
def get_score():
  score = 0
  for i in range(n):
    for j in range(m):
      if temp[i][j] == 0:
        score += 1
  return score

#DFS를 이용해 울타리를 설치하면서, 매번 안전 영역의 크기 계산
def dfs(count):
  global result
  #울타리가 3개 설치된 경우 바이러스 전파
  if count == 3:
    for i in range(n):
      for j in range(m):
        #graph의 내용 temp로 옮기기
        temp[i][j] = graph[i][j]
    for i in range(n):
      for j in range(m):
        if temp[i][j] == 2:
          virus(i,j)
    
    #안전 영역의 값 계산 
    result = max(result, get_score())
    return 

  #빈 공간에 울타리 설치
  for i in range(n):
    for j in range(m):
      if graph[i][j] == 0:
        graph[i][j] = 1
        count += 1
        dfs(count) 
        graph[i][j] = 0
        count -= 1

dfs(0)
print(result)