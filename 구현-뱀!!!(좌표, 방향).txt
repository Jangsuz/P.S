#보드의 크기, 사과의 개수 입력
n = int(input())
k = int(input())

#처음에는 오른쪽을 보고 있으므로 동 남 서 북!
dx = [0, -1, 0, 1]
dy = [1, 0, -1, 0]
#2차원 그래프 0으로 초기화
graph = [[0] * (n+1) for _ in range(n+1)]
#사과 있는 곳은 1로 표시
for i in range(k):
  a, b = map(int, input().split())
  graph[a][b] = 1

#방향 회전 정보 튜플로 입력
d = []
L = int(input())
for _ in range(L):
  x, c = map(input().split())
  d.append((int(x),c))

#방향 알려주는 함수! 여기가 이해가 안가는데 ㅠㅠ
def turn(direction, c):
  if c == 'L':
    direction = (direction - 1) % 4
  else: #c == 'D'
    direction = (direction + 1) % 4
  return direction

def simulate():
  x, y = 1, 1 #뱀의 머리 위치
  graph[x][y] = 2 #뱀이 있는 위치(뱀의 머리가 뱀의 꼬리에 닿을 수 있어서)
  direction = 0 #방향
  time = 0 #시간
  index = 0 #다음에 회전할 정보
  q = [(x,y)] #뱀이 차지하고 있는 위치 정보

  while 1:
    nx = x + dx[direction]
    ny = y + dy[direction]
    #뱀이 맵 안에 있고, 자신의 몸과 부딪히지 않는다면!!
    if 1 <= nx and nx <= n and 1 <= ny and ny <= n and graph[nx][ny] != 2: 
      #사과가 없다면 이동 후 꼬리 제거
      if graph[nx][ny] == 0:
        graph[nx][ny] = 2
        q.append((nx,ny))
        px, py = q.pop(0)
        graph[px][py] = 0
      else:
        graph[nx][ny] = 2
        q.append((nx,ny))
    #벽이나 몸에 부딪혔다면
    else:
      time += 1
      break
    x, y = nx, ny
    time += 1
    #회전할 시간인 경우
    if index < L and time == d[index][0]:
      direction = turn(direction, d[index][1])
      index += 1
  return time

print(simulate())