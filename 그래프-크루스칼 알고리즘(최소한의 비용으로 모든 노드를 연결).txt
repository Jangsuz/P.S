[크루스칼 알고리즘]
📌이론
-신장트리 : 모든 노드가 포함되어 서로 연결되면서 사이클이 존재하지 않는 부분 그래프
-최소한의 비용으로 신장 트리를 찾아야할 때,
ex) '최소한의 비용'으로 모든 도시를 '연결'할 때.
-간선의 개수 : 노드의 개수 - 1
-그리디 알고리즘 : 거리가 가장 짧은 간선부터 차례대로 집합에 추가하면 됨. 단, 사이클을 발생시키는 간선은 제외함
-O(ElogE)

📌동작과정
-간선 데이터를 비용에 따라 오름차순으로 정렬
-간선을 하나씩 확인하며 현재의 간선이 싸이클을 발생시키는지 확인(union-find). 싸이클을 발생시키지 않는 경우 최소 신장 트리에 포함

📌소스코드
#특정 원소가 속한 집합을 찾기
def find_parent(parent, x):
  #루트 노드가 아니라면, 루트 노드를 찾을 때까지 재귀적으로 호출
  if parent[x] != x:
    parent[x] = find_parent(parent, parent[x])
  return parent[x]

#두 원소가 속한 집합을 합치기
def union_parent(parent, a, b):
  a = find_parent(parent, a)
  b = find_parent(parent, b)
  if a < b :
    parent[b] = a
  else:
    parent[a] = b

#노드의 개수와 간선의 개수 입력받기
##부모 테이블 초기화
v, e = map(int, input().split())
parent = [0] * (v + 1)

#모든 간선을 담을 리스트와 최종 비용을 담을 변수
edges = []
result = 0

#부모 테이블상에서, 부모를 자기 자신으로 초기화
for i in range(1, v + 1):
  parent[i] = i

#모든 간선에 대한 정보를 입력받기
for _ in range(e):
  a, b, cost = map(int, input().split())
  #비용 순으로 정렬하기 위해서 튜플의 첫번째 원소를 비용으로 설정
  edges.append((cost,a,b))

#간선을 비용순으로 정렬
edges.sort()

#간선을 하나씩 확인하며
for edge in edges:
  cost, a, b = edge
  #사이클이 발생하지 않는 경우에만 집합에 포함
  if find_parent(parent, a) != find_parent(parent, b):
    union_parent(parent, a, b)
    result += cost

print(result)